name: Build and Release

on:
  workflow_call:
  workflow_dispatch:

env:
  RUSTFLAGS: -Dwarnings
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Run ${{ matrix.tool.name }}
    strategy:
      matrix:
        tool:
          - { name: rustfmt, args: fmt --all --check }
          - { name: clippy, args: clippy }
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
      - name: Run ${{ matrix.tool.name }}
        run: cargo ${{ matrix.tool.args }}
  test:
    name: Build and test
    runs-on: ubuntu-22.04
    needs: [lint]
    services:
      postgres:
        image: postgres:15.4
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: moam
          POSTGRES_PASSWORD: password
          POSTGRES_DB: moam
    env:
      DATABASE_URL: postgres://moam:password@localhost:5432/moam
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
      - name: Check if .sqlx directory is up to date
        run: cargo sqlx prepare --check
      - name: Build project
        run: cargo build --verbose
      - name: Test project
        run: cargo test --verbose
  release:
    name: Release
    runs-on: ubuntu-22.04
    needs: [test]
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    env:
      SQLX_OFFLINE: true
    steps:
      - name: Get the privileged API key
        id: atedeg-bot
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.ATEDEG_BOT_APP_ID }}
          private_key: ${{ secrets.ATEDEG_BOT_PRIVATE_KEY }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.atedeg-bot.outputs.token }}
          fetch-depth: 0
      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
      - name: Setup Node toolchain
        uses: ./.github/actions/setup-node
      - name: Build project with release profile
        run: cargo build --verbose --release
      - name: Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ steps.atedeg-bot.outputs.token }}
  outcome:
    name: Build and release outcome
    runs-on: ubuntu-22.04
    needs: [lint, test, release]
    if: always()
    steps:
      - name: Verify there are no failed or cancelled jobs
        run: jq --exit-status 'all(.result == "success" or .result == "skipped")' <<< '${{ toJson(needs) }}'
